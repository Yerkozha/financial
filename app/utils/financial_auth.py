import os

import jwt
from rest_framework_simplejwt.authentication import JWTTokenUserAuthentication





# def decode_access_token(access_token: str) -> dict:
#     """
#     Verify a JWT access token generated by Auth0, and return its decoded content.
#     """
#
#     return jwt.decode(
#         access_token,
#         PUBLIC_KEY,
#         algorithms=["RS256"],
#         verify=True,
#     )
#
# class FinancialAuthentication(JWTTokenUserAuthentication):
#     def get_validated_token(self, raw_token):
#         """
#         Validates an encoded JSON web token and returns a validated token
#         wrapper object.
#         """
#         messages = []
#         try:
#             return decode_access_token(raw_token)
#         except Exception as e:
#             messages.append(
#                 {"token_class": "mytoken", "token_type": "access", "message": e.args[0]}
#             )
#
#         raise InvalidToken(
#             {
#                 "detail": "Given token not valid for any token type",
#                 "messages": messages,
#             }
#         )
#
#     def authenticate(self, request):
#
#         try:
#             user, auth = super().authenticate(request)
#         except TypeError:
#             return None
#
#         c_id = user.token.get("customer_external_id")
#
#         with configure_scope() as scope:
#             scope.user = {"id": c_id}
#
#         logger.bind(user_id=c_id)
#
#         return user, auth
